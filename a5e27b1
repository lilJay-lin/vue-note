#a5e27b1

指令实现基础方式

## 大体实现流程

1. html绑定指令

    ```html
    
        <div id="test" sd-on-click="changeMessage | .button">
            <p sd-text="msg | capitalize"></p>
            <p sd-show="something">YOYOYO</p>
            <p class="button" sd-text="msg"></p>
            <p sd-class-red="error" sd-text="hello"></p>
        </div>
    ```

2. 实例化seed对象，解析指令，绑定dom节点和数据

    ```javascript
    
        Seed.create({
            id: 'test',
            scope: {
                msg: 'hello',
                hello: 'WHWHWHW',
                changeMessage: function () {
                    app.scope.msg = 'hola'
                }
            }
        })
    ```

### seed代码解析

1. 过滤器定义

    纯函数：
    
    ```javascript
    
        Filters = {
            reverse: function(value){
                return value.split('').reverse().join('');
            }
        };
    ```

2. 指令定义

    1. 非dom事件，目的是做dom操作
    
        ```javascript
            Directives = {
                show: function(el, value){ 
                    el.style.display = value ? '' : 'none';
                },
                class: function(el, value, argument){
                    el.classList[value ? 'add' : 'remove'](argument);
                }
            }
        ```
    2. dom事件绑定
    
        ```javascript
            /*directive当前节点绑定的directive指令对象，handle绑定的方法属性，event指令参数也就是事件名*/
            Directives = {
                on: {
                    bind: function(el, handle, event, directive){
                        do 事件绑定，保存入directive
                    },
                    update: function(el, handle, event, directive){
                        do 解绑旧事件，绑定新事件，保存入directive
                    },
                    unbind: function(el, event, directive){
                        do 事件解绑
                    }
                }
            }
        ```
3. seed 代码解析
    
    1. 变量解释
    
    ```javascript
        bindings = {} // 关联真实数据
        self.scope = {} //扩展的对象接口，用来同步更新数据
    ```
    
    2. 获取所有包含属性格式为`sd-xxx`的DOM节点，对节点集做循环处理(processNode)，解析指令(parseDirective)，并执行指令绑定(bindDirective)
    
        processNode： 从节点属性key-value解析出指令名，指令参数，绑定的参数值和过滤器信息。
        
        parseDirective，指令解析结果示例：
        
        ```javascript
        
            //示例： sd-text = 'msg | reverse' 
            //解析结果
            directive = {
                attr: {name: sd-text, value: 'msg | reverse' },
                key: 'msg',
                filters: ['reverse'],
                definition: Directives['text'],
                argument: null,
                update: Directives['text']
            }
            
            //示例： sd-on-click = 'submit' 
            //解析结果
            directive = {
                attr: {name: 'sd-on-click', value: 'submit' },
                key: 'submit',
                filters: null,
                definition: Directives['on'],
                argument: 'click',
                update: Directives['on'].update
            }
        ```
        
        取得解析结果directive，做指令绑定bindDirective:
        
        * 移除节点上的指令属性
        * 保存需要监听的属性,记录属性值和属性关联的指令：`bindings[directive.key] = binding = {value: undefined, directives: [] }`
        * 在directive上缓存关联的dom节点`directive.el = el`, 把指令和属性关联`binding.directives.push(directive)`
        * 执行`directive.bind`钩子做初始化
        * 在`seed.scope`定义属性,监听属性变化同步更新`bindings[directive.key]`并执行指令
            
            ```javascript
            
                Object.defineProperty(seed.scope, key, {
                    get: function () {
                        return binding.value
                    },
                    set: function (value) {
                        binding.value = value
                        binding.directives.forEach(function (directive) {
                            if (value && directive.filters) {
                                //执行filters
                                value = applyFilters(value, directive)
                            }
                            //执行directive
                            directive.update(
                                directive.el,
                                value,
                                directive.argument,
                                directive,
                                seed
                            )
                        })
                    }
                })
            ```
    
    3. 做好指令解析和属性绑定，接下来需要做数据初始化，只需要把传入的参数对象复制给`seed.scope`就会触发`set`逻辑
    
    ```javascript
        for (var key in bindings) {
            self.scope[key] = opts.scope[key]
        }
    ```